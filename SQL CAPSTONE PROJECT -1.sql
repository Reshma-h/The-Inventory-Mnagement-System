
                  ----- CREATING DATABASE "ASSIGNMENT"-----
DROP DATABASE ASSIGNMENT

CREATE DATABASE ASSIGNMENT;
 
                   ----- USING ASSIGNMENT-----  
USE ASSIGNMENT;

----- CREATING A CUSTOMER TABLE WHICH COMPRISES OF THESE COLUMNS-----
CREATE TABLE CUSTOMER (
                      CUSTOMER_ID INT  PRIMARY KEY,
					  FIRST_NAME CHAR(10),
					  LAST_NAME CHAR(10),
					  EMAIL VARCHAR(30),
					  ADDRESS VARCHAR(30),
					  CITY CHAR(12),
					  STATE VARCHAR(20), 
					  ZIP INT);


-----INSERTING 5 NEW RECORDS INTO THE TABLE-----

INSERT INTO CUSTOMER(CUSTOMER_ID ,FIRST_NAME ,LAST_NAME ,EMAIL ,ADDRESS ,CITY ,STATE ,ZIP)

             VALUES (1,'GEET' ,'RAJ' ,'GEETRAJ@GMAIL.COM' ,'BHILLS-29' ,'SAN JOSE' ,'CALIFORNIA' ,412565),

                    (2,'JOHN' ,'DEERE' ,'JOHN11@GMAIL.COM' ,'SEMINARY ROAD' ,'SAN JOSE' ,'CALIFORNIA' ,562341),

                    (3,'ABRAM' ,'KHAN' ,'KHANABRAM@GMAIL.COM' ,'MOSCOW HEIGHTS - 12' ,'BANGALORE' ,'KARNATAKA' ,457264),

                    (4,'GAUTAM' ,'SANJEEV' ,'SANJUGAUTAM12@GMAIL.COM' ,'FALCON HILLS-35' ,'PUNE' ,'MAHARASTRA' ,444460),

                    (5,'GAIL' ,'HARDY' ,'GAIL39@GMAIL.COM' ,'SKAGEN-29' ,'MERIDA' ,'MEXICO' ,445619);

SELECT * FROM CUSTOMER


-----SELECT ONLY FIRST_NAME,LAST_NAME FROM CUSTOMER TABLE-----

 SELECT FIRST_NAME,LAST_NAME 
 FROM CUSTOMER;


 ----SELECT THOSE RECORDS WHERE FIRST_NAME STARTS WITH 'G' & CITY IS 'SAN JOSE'-----

 SELECT * FROM CUSTOMER
 WHERE  CITY = 'SAN JOSE'  AND  FIRST_NAME LIKE 'G%';


----CREATING TABLE 'ORDERS' WHICH COMPRISES OF THESE COLUMNS-----

CREATE TABLE ORDERS ( 
                     CUSTOMER_ID INT ,
                     ORDER_ID INT,
					 ORDER_DATE DATE ,
					 AMOUNT INT
					 );


-----INSERTING RECORDS INTO ORDERS TABLE-----

 INSERT INTO ORDERS( CUSTOMER_ID,ORDER_ID,ORDER_DATE,AMOUNT) 
          VALUES (2,101,'01/01/2021',5000),

		         (3,102,'01/14/2021',6500),

		         (4,103,'01/27/2021',2300),

                 (6,104,'02/02/2021',5040),

				 (8,105,'02/07/2021',1570),

				 (2,106,'01/23/2021',5000),

				 (3,107,'01/11/2021',600),

				 (4,108,'02/02/2021',2300),

				 (4,109,'02/05/2021',450),

				 (8,110,'02/07/2021',1530);
 
SELECT * FROM ORDERS


-----MAKING INNER JOIN ON 'CUSTOMER' & 'ORDERS' TABLE ON THE CUSTOMER_ID COLUMN------

SELECT  CUSTOMER.CUSTOMER_ID , FIRST_NAME, LAST_NAME, ADDRESS, CITY, STATE, ZIP,

     ORDERS.ORDER_ID, ORDER_DATE,AMOUNT

 FROM CUSTOMER

     INNER JOIN ORDERS 

           ON CUSTOMER.CUSTOMER_ID =ORDERS.CUSTOMER_ID;

-----LEFT JOIN-----

SELECT  CUSTOMER.CUSTOMER_ID , FIRST_NAME, LAST_NAME, ADDRESS, CITY, STATE, ZIP,

ORDERS.ORDER_ID, ORDER_DATE, AMOUNT

   FROM CUSTOMER

           LEFT JOIN ORDERS 

   ON CUSTOMER.CUSTOMER_ID =ORDERS.CUSTOMER_ID;


-----RIGHT JOIN -----

SELECT  CUSTOMER.CUSTOMER_ID , FIRST_NAME, LAST_NAME, ADDRESS, CITY, STATE, ZIP,

ORDERS.ORDER_ID, ORDER_DATE, AMOUNT

     FROM CUSTOMER

             RIGHT JOIN ORDERS
 
 ON CUSTOMER.CUSTOMER_ID =ORDERS.CUSTOMER_ID;


-----UPDATE 'ORDERS'TABLE, SET THE AMOUNT TO BE 100 WHERE CUSTOMER_ID IS 3-----

UPDATE  ORDERS SET AMOUNT =100
WHERE CUSTOMER_ID = 3;

-----CHECKING THE UPDATED EXECUTION -----

SELECT CUSTOMER_ID , AMOUNT FROM ORDERS
WHERE AMOUNT = 100;


----- INBUILT FUNCTIONS TO FIND MINIMUM, MAXIMUM & AVERAGE AMOUNT FROM ORDERS TABLE -----

SELECT MAX(AMOUNT) AS MAX_AMOUNT FROM ORDERS;

SELECT MIN(AMOUNT) AS MIN_AMOUNT FROM ORDERS;

SELECT AVG(AMOUNT) AS AVG_AMOUNT FROM ORDERS;


----- CREATE A USER-DEFINED FUNCTION "PROD",WHICH WILL MULTIPLY THE GIVEN NUMBER WITH 10 -----
GO
CREATE FUNCTION PROD (@X INT ,@Y INT ,@Z CHAR(1))
                RETURNS INT 
				AS 
				    BEGIN 
					     DECLARE @O AS INT 
                IF @Z = '*'
				    SET @O = @X * @Y
             RETURN @O
      END;
GO
SELECT DBO.PROD (9 , 10 , '*') AS 'RESULT' ;
                                                   ----- TWO EXAMPLES TO SHOW THE RESULTS------
SELECT DBO.PROD (100 , 10 , '*') AS 'RESULT' ;



----- USING CASE STATEMENT TO CHECK IF 100 <200 ,100 >200 & 100 = 200 ------
SELECT 100 AS NUMBER ,
CASE
        WHEN 100 <200
		THEN '100 IS LESS THAN 200'
		WHEN 100>200
		THEN '100 IS GREATER THAN 200'
		WHEN 100=200
		THEN '100 IS EQUAL TO 200'
ELSE 'NA'
 END AS AMOUNT;


----- ARRANGING THE 'OREDRS' DATASET IN DECREASING ORDER OF AMOUNT-----

SELECT *FROM ORDERS 
ORDER BY AMOUNT DESC;

-----ALSO BY USING JOINS -----

SELECT  CUSTOMER.CUSTOMER_ID , FIRST_NAME, LAST_NAME, ADDRESS, CITY, STATE, ZIP,

ORDERS.ORDER_ID, ORDER_DATE, AMOUNT

    FROM CUSTOMER

                 INNER JOIN ORDERS 

            ON CUSTOMER.CUSTOMER_ID =ORDERS.CUSTOMER_ID

     ORDER BY AMOUNT DESC;


----- CREATING 'EMPLOYEE_DETAILS1' TABLE -----

CREATE TABLE EMPLOYEE_DETAILS1 (
             EMP_ID INT PRIMARY KEY ,
			 EMP_NAME VARCHAR(30) ,
			 EMP_SALARY INT  );

			
 SELECT * FROM EMPLOYEE_DETAILS1


----- INSERTING VALUES INTO 'EMPLOYEE_DETAILS1' TABLE -----

  INSERT INTO EMPLOYEE_DETAILS1(EMP_ID,EMP_NAME,EMP_SALARY)

                         VALUES (101 ,'JOSEPH TRIBBIANI' ,'25000'),

						        (102 ,'MONICA GELLER' ,'30000'),

						        (103,'CHANDLER BING','50000'),

						        (104,'GUNTHER','15000'),

						        (105,'RACHEL GREEN','30000');


----- CREATING ANOTHER TABLE 'EMPLOYEE_DETAILS2' -----
 CREATE TABLE EMPLOYEE_DETAILS2 (
                                 EMP_ID INT,
								 EMP_NAME VARCHAR(30),
								 EMP_SALARY INT);

SELECT * FROM EMPLOYEE_DETAILS2

----- INSERTING VALUES INTO 'EMPLOYEE_DETAILS2' TABLE ------

INSERT INTO EMPLOYEE_DETAILS2( EMP_ID,EMP_NAME,EMP_SALARY)
                       VALUES(101,'JOSEPH TRIBBIANI','25000'),

					         (102,'PHOEBE BUFFAY','30000'),

							 (103,'CHANDLER BING','50000'),

							 (104,'ROSS GELLER','70000'),

							 (105,'RACHEL GREEN','30000');

-----VIEWING BOTH TABLES -----

SELECT * FROM EMPLOYEE_DETAILS1
SELECT * FROM EMPLOYEE_DETAILS2


-----APPLYING 'UNION' OPERATOR ON THESE TWO TABLES -----

SELECT * FROM EMPLOYEE_DETAILS1
UNION
SELECT * FROM EMPLOYEE_DETAILS2


-----APPLYING 'INTERSECT' OPERATOR -----

SELECT * FROM EMPLOYEE_DETAILS1
INTERSECT
SELECT * FROM EMPLOYEE_DETAILS2


-----APPLYING 'EXCEPT' OPERATOR -----

SELECT * FROM EMPLOYEE_DETAILS1
EXCEPT
SELECT * FROM EMPLOYEE_DETAILS2


SELECT * FROM EMPLOYEE_DETAILS2
EXCEPT
SELECT * FROM EMPLOYEE_DETAILS1


----- CREATING A VIEW NAMED 'CUSTOMER_SAN_JOSE' WHICH COMPRISE OF ONLY CUSTOMERS WHO ARE FROM 'SAN JOSE'-----

GO
CREATE VIEW CUSTOMER_SAN_JOSE
 AS
 SELECT * FROM CUSTOMER
 WHERE CITY = 'SAN JOSE';
 GO

DROP VIEW CUSTOMER_SAN_JOSE

 ------ BY USING JOINS -----

GO
CREATE VIEW CUSTOMER_SAN_JOSE 
AS
SELECT  CUSTOMER.CUSTOMER_ID , FIRST_NAME , LAST_NAME , EMAIL , ADDRESS,

 CITY , STATE , ZIP ,ORDERS.ORDER_ID , ORDER_DATE , AMOUNT

 FROM CUSTOMER

INNER JOIN ORDERS 

      ON CUSTOMER.CUSTOMER_ID =ORDERS.CUSTOMER_ID

 WHERE CITY = 'SAN JOSE';
GO 
 
 SELECT * FROM CUSTOMER_SAN_JOSE


 -----INSIDE A TRANSACTION UPDATE THE FIRST NAME OF THE CUSTOMER TO FRANCIS ,WHERE LAST NAME IS JORDAN -----

 BEGIN TRANSACTION
         UPDATE CUSTOMER SET FIRST_NAME = 'FRANCIS'
		 WHERE LAST_NAME = 'JORDAN';
 
 SELECT * FROM CUSTOMER
ROLLBACK TRANSACTION;

BEGIN TRANSACTION
         UPDATE CUSTOMER SET FIRST_NAME = 'ALEX'
		 WHERE LAST_NAME = 'JORDAN';


-----THE ABOVE TRANSACTION SHOWS 0 ROWS EFFECTED BECAUSE THERE IS NO SUCH NAME WHOSE LAST NAME IS JORDAN -----
-----SO LET US UPDATE ANY LAST NAME TO BE JORDAN------

 UPDATE CUSTOMER SET LAST_NAME = 'JORDAN'
 WHERE CUSTOMER_ID = 4;

 SELECT * FROM CUSTOMER

 -----NOW DOING THE TRANSACTION -----
 ----- UPDATE THE FIRST_NAME OF THE CUSTOMER TO 'FRANCIS' WHERE THE LAST_NAME IS 'JORDAN' -----

BEGIN TRANSACTION
         UPDATE CUSTOMER SET FIRST_NAME = 'FRANCIS'
		 WHERE LAST_NAME = 'JORDAN';
 
 SELECT * FROM CUSTOMER


 -----ROLLBACK THE TRANSACTION -----WORKS AS UNDO ------
ROLLBACK TRANSACTION;


-----SET THE FIRST_NAME OF THE CUSTOMER TO 'ALEX' WHERE THE LAST_NAME IS 'JORDAN'-----

BEGIN TRANSACTION
         UPDATE CUSTOMER SET FIRST_NAME = 'ALEX'
		 WHERE LAST_NAME = 'JORDAN';



                         -------      { THE END }       -------
						         
								 ----------    { THANK YOU }     ----------